service:
  name: foodfight-serverless


frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  region: us-east-1
  runtime: python3.7
  environment:
    USER_DYNAMODB_TABLE: ${self:service}-USER-${opt:stage, self:provider.stage}
    KMS_KEY_ID: ${ssm:foodfight-kms-key-id}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: { "Fn::Join" : ["", ["arn:aws:kms:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":key/${self:provider.environment.KMS_KEY_ID}" ] ]  }

functions:
  user-create:
    handler: user/create.create
    events:
      - http:
          path: user
          method: post
          cors: true

  user-list:
    handler: user/list.list
    events:
      - http:
          path: user
          method: get
          cors: true

  user-get:
    handler: user/get.get
    events:
      - http:
          path: user/{username}
          method: get
          cors: true

  user-update:
    handler: user/update.update
    events:
      - http:
          path: user/{username}
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.username, method.request.header.password

  user-delete:
    handler: user/delete.delete
    events:
      - http:
          path: user/{username}
          method: delete
          cors: true

  auth:
    handler: basicAuth.basicAuth
    cors: true

  buy_weapon:
    handler: shop/buy_weapon.buy_weapon
    events:
      - http:
          path: shop/weapon/buy/{weapon_id}
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.username, method.request.header.password

  buy_armor:
    handler: shop/buy_armor.buy_armor
    events:
      - http:
          path: shop/armor/buy/{armor_id}
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.username, method.request.header.password

  sell_weapon:
    handler: shop/sell_weapon.sell_weapon
    events:
      - http:
          path: shop/weapon/sell
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.username, method.request.header.password

  sell_armor:
    handler: shop/sell_armor.sell_armor
    events:
      - http:
          path: shop/armor/sell
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.username, method.request.header.password


resources:
  Resources:
    FoodFightUserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_DYNAMODB_TABLE}

    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'